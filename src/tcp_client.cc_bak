#ifndef __TCP_CLIENT_H__
#define __TCP_CLIENT_H__

#include <signal.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "print_error.h"

class tcp_client
{
public:
    tcp_client(const char* ip, unsigned short port, )
    {
        //ignore SIGHUP and SIGPIPE
        if (::signal(SIGHUP, SIG_IGN) == SIG_ERR)
        {
            error_log("signal ignore SIGHUP");
        }
        //create socket
        _sockfd = ::socket(AF_INET, SOCK_STREAM | SOCK_CLOEXEC, IPPROTO_TCP);
        exit_if(_sockfd == -1, "socket()");

        _servaddr.sin_family = AF_INET;
        int ret = ::inet_aton(ip, &_servaddr.sin_addr);
        exit_if(ret == 0, "ip format %s", ip);
        _servaddr.sin_port = htons(port);
        _addrlen = sizeof _servaddr;

        int ret = ::connect(_sockfd, (const struct sockaddr*)&_servaddr, _addrlen);
        exit_if(ret == -1, "connect()")
        
        //set NONBLOCK
        int flag = ::fcntl(_sockfd, F_GETFL, 0);
        ret = ::fcntl(_sockfd, F_SETFL, O_NONBLOCK | flag);
        exit_if(ret == -1, "fcntl F_SETFL");
    }

    

    ~tcp_client()
    {
        ::close(_sockfd);
    }
private:
    int _sockfd;
//    event_loop* _loop;
    struct sockaddr_in _servaddr;
    socklen_t _addrlen;
};

#endif
